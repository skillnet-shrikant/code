$class=oms.commerce.order.OMSOrderTools

#
# The PipelineManager which is configured with the pipelines for execution by the OrderManager
# and OrderTools.
#
pipelineManager=/atg/commerce/PipelineManager

#
# The GiftlistManager Nucleus component.
#
giftlistManager=/atg/commerce/gifts/GiftlistManager

#
# The InventoryManager Nucleus component.
#
inventoryManager=/atg/commerce/inventory/InventoryManager

#
# The service used to manage all transactions
#
transactionManager=/atg/dynamo/transaction/TransactionManager

#
# The ProfileTools Nucleus component.
#
profileTools=/atg/userprofiling/ProfileTools

#
# The CatalogTools Nucleus component.
#
catalogTools=/atg/commerce/catalog/CatalogTools

#
# The OrderRepository Nucleus component which will be used by the
# OrderManager to save and load Orders.
#
orderRepository=/oms/commerce/order/OMSOrderRepository


# The item descriptor name for an order
orderItemDescriptorName^=/atg/commerce/order/OrderTools.orderItemDescriptorName

#
# Flags which control the creation of the default Shipping and Payment
# Groups when creating a new Order.
#
createDefaultShippingGroup^=/atg/commerce/order/OrderTools.createDefaultShippingGroup
createDefaultPaymentGroup^=/atg/commerce/order/OrderTools.createDefaultPaymentGroup

#
# The Profile Repository.
#
profileRepository^=/atg/commerce/order/OrderTools.profileRepository
defaultProfileType^=/atg/commerce/order/OrderTools.defaultProfileType

#
# The default PriceInfo classes to use for Orders, Items, Shipping, and Tax
#
defaultOrderPriceInfoClass^=/atg/commerce/pricing/OrderPricingEngine.priceInfoClass
defaultTaxPriceInfoClass^=/atg/commerce/pricing/TaxPricingEngine.priceInfoClass
defaultItemPriceInfoClass^=/atg/commerce/pricing/ItemPricingEngine.priceInfoClass
defaultShippingPriceInfoClass^=/atg/commerce/pricing/ShippingPricingEngine.priceInfoClass

#
# Defines the type to classname mapping for Order objects. When createOrder() is called
# with a String argument such as "default", it will construct an instance of an Order class
# which is mapped to that String. The mapping is defined below. To add additional mappings,
# follow the model below:
# orderTypeClassMap=\
#			default=atg.commerce.order.OrderImpl,\
#			default2=atg.commerce.order.OrderImpl2
#
# When the OrderManager goes to create an Order,
# it is passed a value (the key on the left) and it
# creates an object of the following class (the value on # the right).
#
# Note: The shoppingcart type is provided for backward compatibility
# with DCS 5.X, where the OrderHolder class set its orderType property
# to "shoppingcart" by default.  Beginning with DCS 6.0, OrderHolder
# inherits the default orderType from OrderTools.defaultOrderType, and
# the special "shoppingcart" type is not longer used by default.
#
orderTypeClassMap^=/atg/commerce/order/OrderTools.orderTypeClassMap

#
# Specifies the type of the default Order. When the OrderManager creates an Order without
# being given a specific Order type, it automatically creates an Order of this type.
# See above orderTypeClassMap property for the mapping of this type, to the class instance
# created.
#
defaultOrderType^=/atg/commerce/order/OrderTools.defaultOrderType

#
# Defines the type to classname mapping for CommerceItem objects. When createCommerceItem() is called
# with a String argument such as "default", it will construct an instance of a CommerceItem class
# which is mapped to that String. The mapping is defined below. To add additional mappings,
# follow the model below:
# commerceItemTypeClassMap=\
#			default=atg.commerce.order.CommerceItemImpl,\
#			default2=atg.commerce.order.CommerceItemImpl2
#
# When the OrderManager goes to create a CommerceItem,
# it is passed a value (the key on the left) and it
# creates an object of the following class (the value on # the right).
#
commerceItemTypeClassMap^=/atg/commerce/order/OrderTools.commerceItemTypeClassMap

#
# Specifies the type of the default CommerceItem. When the OrderManager creates a CommerceItem without
# being given a specific CommerceItem type, it automatically creates a CommerceItem of this type.
# See above commerceItemTypeClassMap property for the mapping of this type, to the class instance
# created.
#
defaultCommerceItemType^=/atg/commerce/order/OrderTools.defaultCommerceItemType

#
# Defines the type to classname mapping for ShippingGroup objects. When createShippingGroup() is called
# with a String argument such as "default", it will construct an instance of a ShippingGroup class
# which is mapped to that String. The mapping is defined below. To add additional mappings,
# follow the model below:
# shippingTypeClassMap=\
#			default=atg.commerce.order.ShippingGroupImpl,\
#			default2=atg.commerce.order.ShippingGroupImpl2
#
# When the OrderManager goes to create a ShippingGroup,
# it is passed a value (the key on the left) and it
# creates an object of the following class (the value on # the right).
#
shippingTypeClassMap^=/atg/commerce/order/OrderTools.shippingTypeClassMap

#
# Specifies the type of the default ShippingGroup. When the OrderManager creates a ShippingGroup without
# being given a specific ShippingGroup type, it automatically creates a ShippingGroup of this type.
# See above shippingGroupTypeClassMap property for the mapping of this type, to the class instance
# created.
#
defaultShippingGroupType^=/atg/commerce/order/OrderTools.defaultShippingGroupType

#
# Defines the type to classname mapping for PaymentGroup objects. When createPaymentGroup() is called
# with a String argument such as "default", it will construct an instance of a PaymentGroup class
# which is mapped to that String. The mapping is defined below. To add additional mappings,
# follow the model below:
# paymentTypeClassMap=\
#			default=atg.commerce.order.PaymentGroupImpl,\
#			default2=atg.commerce.order.PaymentGroupImpl2
#
# When the OrderManager goes to create a PaymentGroup,
# it is passed a value (the key on the left) and it
# creates an object of the following class (the value on # the right).
#
paymentTypeClassMap^=/atg/commerce/order/OrderTools.paymentTypeClassMap

#
# Specifies the type of the default PaymentGroup. When the OrderManager creates a PaymentGroup without
# being given a specific PaymentGroup type, it automatically creates a PaymentGroup of this type.
# See above paymentGroupTypeClassMap property for the mapping of this type, to the class instance
# created.
#
defaultPaymentGroupType^=/atg/commerce/order/OrderTools.defaultPaymentGroupType



#
# Defines the type to classname mapping for HandlingInstruction objects. When createHandlingInstruction()
# is called with a String argument such as "default", it will construct an instance of a HandlingInstruction
# class which is mapped to that String. The mapping is defined below. To add additional mappings,
# follow the model below:
# handlingTypeClassMap=\
#			default=atg.commerce.order.HandlingInstructionImpl,\
#			default2=atg.commerce.order.HandlingInstructionImpl2
#
# When the OrderManager goes to create a HandlingInstruction,
# it is passed a value (the key on the left) and it
# creates an object of the following class (the value on # the right).
#
handlingTypeClassMap^=/atg/commerce/order/OrderTools.handlingTypeClassMap

#
# Specifies the type of the default HandlingInstruction. When the OrderManager creates a HandlingInstruction without
# being given a specific HandlingInstruction type, it automatically creates a HandlingInstruction of this type.
# See above handlingTypeClassMap property for the mapping of this type, to the class instance
# created.
#
defaultHandlingInstructionType^=/atg/commerce/order/OrderTools.defaultHandlingInstructionType

#
# Defines the type to classname mapping for Relationship objects. When createRelationship() is called
# with a String argument such as "default", it will construct an instance of a Relationship class
# which is mapped to that String. The mapping is defined below. To add additional mappings,
# follow the model below:
# relationshipTypeClassMap=\
#			shippingGroupCommerceItem=atg.commerce.order.ShippingGroupCommerceItemRelationshipImpl,\
#			paymentGroupCommerceItem=atg.commerce.order.PaymentGroupCommerceItemRelationshipImpl
#
# When the OrderManager goes to create a Relationship,
# it is passed a value (the key on the left) and it
# creates an object of the following class (the value on # the right).
#
relationshipTypeClassMap^=/atg/commerce/order/OrderTools.relationshipTypeClassMap

#
# The property maps a shippingGroup name to its corresponding shippingAddress class name
#
shippingGroupShippingAddressClassNameMap^=/atg/commerce/order/OrderTools.shippingGroupShippingAddressClassNameMap

#
# The property maps a paymentGroup name to its corresponding billingAddress class name
#                     
paymentGroupBillingAddressClassNameMap^=/atg/commerce/order/OrderTools.paymentGroupBillingAddressClassNameMap

#
# The default address type to use when creating a ShippingGroup if one is not
# found in the shippingGroupShippingAddressClassNameMap property
#
defaultShippingGroupAddressType^=/atg/commerce/order/OrderTools.defaultShippingGroupAddressType

#
# The default address type to use when creating a PaymentGroup if one is not
# found in the paymentGroupBillingAddressClassNameMap property
#
defaultPaymentGroupAddressType^=/atg/commerce/order/OrderTools.defaultPaymentGroupAddressType

#
# This property maps a bean name to an OrderRepository item descriptor.
# By default the processor will look for an OrderRepository property descriptor which
# is the same as the bean property name. If there are any properties whose names
# differ, they can be mapped here.
# The format is bean_name=repository_item_descriptor.
#
# When the OrderManager goes to save an object to the repository,
# it figures out what class the object is an instance of (the key on the left)
# and it stores it in the item-descriptor specified (the value on the right).
#
beanNameToItemDescriptorMap^=/atg/commerce/order/OrderTools.beanNameToItemDescriptorMap

# repository type for order fixed amount manual adjustments
orderFixedAmountAdjustmentType^=/atg/commerce/order/OrderTools.orderFixedAmountAdjustmentType

orderLookupService=/atg/commerce/order/OrderLookupService