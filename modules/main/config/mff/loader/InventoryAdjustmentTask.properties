$class=mff.loader.InventoryLoaderTask
$scope=global

# Flag to turn on/off task
enable=false

# SFTP related properties
# These need to be defined only if we have
# downloadFeedsFromSFTP set to true

# SFTP client component
sftpClient=/mff/util/ftp/SFTPClient

# Remote SFTP directory
remoteDir=/Inventory/full

# Local dir where files from SFTP will be downloaded to
#localDir=/vagrant/feeds/csv/inventory/full

# Prefix of files that we should pick up for processing
# Applies both to FTP directory and local directory
filePrefix=ECOM_INV

# Main stored proc that handles all of the import
# processing logic
#storedProcName={call mff_inventory_loader.insert_trans_records}

#transStoredProcName={call mff_inventory_loader.insert_trans_records()}
invAdjustmentProcName={call mff_inventory_loader.adjust_allocation_count()}

# stored proc handling archival
#archiveStoredProcName={call mff_inventory_loader.archive_files(?,?)}

# stored proc handling deletion of feeds
deleteStoredProcName={call mff_inventory_loader.delete_files(?,?)}

# Flag to delete feeds instead of archiving
deleteFeeds=false

# Flag to determine if damaged flag needs to be reset
resetDamaged=false

# Connection to the CATFEED schema
feedDataSource=/atg/dynamo/service/jdbc/DirectJTDataSource_catfeed

taskName=Adjust PPS Inventory

# Unique job code/message to be used
# for logging messages
jobErrorCode=MFF_U1000_3_CRITICAL_CODE
jobErrorMsg=MFF_U1000_3_CRITICAL_MSG

logger=/mff/logging/Logger

backInStockQuery=select distinct catalog_ref_id from atg_core.mff_inventory where (stock_level-(sold+allocated+shipped)) >0 and catalog_ref_id in (select distinct catalog_ref_id from atg_core.mff_back_in_stock)
inventoryManager=/atg/commerce/inventory/InventoryManager
sendUpdateInventoryMessages=false
testSkuIds=000007682
defaultLocationId=4000

# Specifies if we should deal with repo caches
# applicable if affected repo has cache to begin with
# Inv repo is not cached. Hence SQL updates does
# not need cache invalidation
invalidateCaches=false

# specifies if we should download feeds from SFTP location
downloadFeedsFromSFTP=false

# Flag to determine if this component processes
# a FULL inv feed or a delta feed
deltaFeed=false

tableName=tmp_inv_csv

# Email Configs

notificationEmailList=cgopalan@dminc.com
notificationEmailFromAddress=no.reply@fleetfarm.com
disableEmail=false
runServer=localhost
queryTimeout=2100
# Component that deals with repo cache invalidation
#cacheInvalidator=/mff/services/cache/TargetCacheInvalidatorRemoteHelper


# selective cache invalidation threshold
# if count of updated items is under the threshold defined
# only updated items will be invalidated from the cache.
# when threshold of updated items exceed threshold
# then all items are dumped from the cache
# value of -1 means repo cache id dumped
#sciThreshold=2

# JNDI uri to pricelists repo.. used for cache invalidation
#repoJNDIUri=atgrep:/PriceLists/price/

# prefixes used for generating repo ids for "price" items
#idPrefixes=lp-,sp-

fileTriggerEnabled=false
readyFileDir=/vagrant/googleadwords
readyFileName=fullinv_ready.txt


sendSimpleEmail=true